// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  CLIENT
}

enum Status {
  PENDING
  PAID
  CANCELLED
}

enum SystemType {
  EU
  US
  UK
  CM
}

model User {
  id                 Int      @id @default(autoincrement())
  name               String?
  lastName           String?
  username           String?
  email              String?
  password           String?
  role               UserRole?
  createdAt          DateTime? @map("created_at")
  updatedAt          DateTime? @map("updated_at")
  active             Boolean   @default(true)      // por defecto activo

}

model Adress {
  id                 Int      @id @default(autoincrement())
  street             String?
  town               String?
  state              String?
  cpi                String?
  country            String?
  createdAt          DateTime? @map("created_at")
  updatedAt          DateTime? @map("updated_at")
  active             Boolean   @default(true)      // por defecto activo
}

model Category {
  id                 Int      @id @default(autoincrement())
  createdAt          DateTime? @map("created_at")
  updatedAt          DateTime? @map("updated_at")
  name               String?
  typeId             Int?     @map("type_id")
  type               Type?    @relation(fields: [typeId], references: [id])
  active             Boolean   @default(true)      // por defecto activo

  @@map("category")
}

model Type {
  id                 Int        @id @default(autoincrement())
  name               String?
  categories         Category[] 
  active             Boolean   @default(true)

  @@map("type")
}


model Detail {     
  id                 Int            @id @default(autoincrement())
  createdAt          DateTime?      @map("created_at")
  updatedAt          DateTime?      @map("updated_at")
  quantity           Int?
  productId          Int?           @map("product_id")
  orderId            Int?           @map("order_id")
  active             Boolean   @default(true)      // por defecto activo

  product            Product?       @relation(fields: [productId], references: [id])
  purchaseOrder      PurchaseOrder? @relation(fields: [orderId], references: [id])

  @@map("detail")
}

model Discount {
  id                 Int            @id @default(autoincrement())
  createdAt          DateTime?      @map("created_at")
  updatedAt          DateTime?      @map("updated_at")
  active             Boolean   @default(true)      // por defecto activo
  startDate          DateTime? @map("start_date")
  endDate            DateTime? @map("end_date")
  discountPercentage Int?     @map("discount_percentage")

}

model Product {
  id          Int       @id @default(autoincrement())
  createdAt   DateTime? @map("created_at")
  updatedAt   DateTime? @map("updated_at")

  name        String?
  price       Float?    
  description String?
  image       String?
  categoryId  Int?      @map("category_id")
  colour      Int?      
  brand       Int?      
  active      Boolean   @default(true)

  category    Category? @relation(fields: [categoryId], references: [id])

  @@map("products")
}

model ProductDiscount {
  idDiscount Int  @map("id_discount")
  idProduct  Int  @map("id_product")

  discount   Discount @relation(fields: [idDiscount], references: [id])
  product    Product  @relation(fields: [idProduct], references: [id])

  @@id([idDiscount, idProduct])
  @@map("product_discount")
}


model ProductImage {
  id                      Int      @id @default(autoincrement())
  createdAt   DateTime? @map("created_at")
  updatedAt   DateTime? @map("updated_at")
  active      Boolean   @default(true)

  link                    String?  
  productId               Int?     @map("product_id")
  isPrincipalProductImage Boolean  @map("is_principal_product_image") @default(false)
  
  product                 Product? @relation(fields: [productId], references: [id])

  @@map("product_image")
}

model ProductSize {
  idSize Int  @map("id_size")
  idProduct  Int  @map("id_product")

  size       Size @relation(fields: [idSize], references: [id])
  product    Product  @relation(fields: [idProduct], references: [id])

  @@id([idSize, idProduct])
  @@map("product_size")
}

model PurchaseOrder {
  id             Int          @id @default(autoincrement())
  createdAt      DateTime?    @map("created_at")
  updatedAt      DateTime?    @map("updated_at")
  userId         Int?         @map("user_id")
  userAddressId  Int?         @map("user_address_id")
  total          Float?       
  paymentMethod  String?      @map("payment_method")
  status         Status?      
  active      Boolean   @default(true)


  user           User?        @relation(fields: [userId], references: [id])
  usersAdress    UsersAdress? @relation(fields: [userId, userAddressId], references: [userId, addressId])

  @@map("purchase_order")
}

model Size {
  id          Int         @id @default(autoincrement())
  createdAt   DateTime?   @map("created_at")
  updatedAt   DateTime?   @map("updated_at")
  active      Boolean     @default(true)
  number      String
  systemType  SystemType? @map("system_type")

  @@map("size")
}

model UsersAdress {
  userId    Int      @map("user_id")
  addressId Int      @map("address_id")

  user      User     @relation(fields: [userId], references: [id])
  adress    Adress   @relation(fields: [addressId], references: [id])

  @@id([userId, addressId])
  @@map("user_addresses")
}
